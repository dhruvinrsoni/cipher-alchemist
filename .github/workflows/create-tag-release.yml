name: üè∑Ô∏è Create Tag & Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release Version (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release Type'
        required: true
        default: 'release'
        type: choice
        options:
          - release
          - prerelease
      auto_deploy:
        description: 'Auto-deploy after release'
        required: true
        default: false
        type: boolean

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      tag_name: ${{ steps.create_tag.outputs.tag_name }}
      release_success: ${{ steps.set_success.outputs.success }}
    
    steps:
      - name: üõí Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç Validate Version Format
        run: |
          if [[ ! "${{ github.event.inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?$ ]]; then
            echo "‚ùå Invalid version format. Use semantic versioning (e.g., 1.0.0)"
            exit 1
          fi
          
          if git tag -l | grep -q "^v${{ github.event.inputs.version }}$"; then
            echo "‚ùå Tag v${{ github.event.inputs.version }} already exists"
            exit 1
          fi
          
          echo "‚úÖ Version v${{ github.event.inputs.version }} is valid"

      - name: üìù Update Version Files
        run: |
          # Update version.txt
          IST_TIME=$(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S IST')
          echo "üîñ v${{ github.event.inputs.version }} ¬∑ $IST_TIME ¬∑ üöÄ Release" > version.txt
          
          # Update manifest.json if exists
          if [ -f manifest.json ]; then
            # Install jq if not available
            if ! command -v jq &> /dev/null; then
              sudo apt-get update && sudo apt-get install -y jq
            fi
            jq '.version = "${{ github.event.inputs.version }}"' manifest.json > manifest.tmp && mv manifest.tmp manifest.json
          fi
          
          echo "‚úÖ Updated version files"

      - name: üìã Update RELEASES.md
        run: |
          # Generate release notes content
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          IST_TIME=$(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S IST')
          
          if [ -n "$LATEST_TAG" ]; then
            CHANGES=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- **%s** - %b" --no-merges | head -10)
          else
            CHANGES=$(git log --pretty=format:"- **%s** - %b" --no-merges -10)
          fi
          
          # Handle empty changelog case
          if [ -z "$CHANGES" ]; then
            CHANGES="- **Initial release** - First version of Cipher Alchemist"
          fi
          
          # Create the new RELEASES.md content using a safer approach
          cat > temp_release.md << EOF
          # üöÄ Release History
          
          ## üìã Current Release: v${{ github.event.inputs.version }}
          
          **Release Date:** $IST_TIME  
          **Branch:** main  
          **Status:** ‚úÖ Active Release
          
          ### üéâ What's New in v${{ github.event.inputs.version }}
          
          #### üöÄ Key Features & Improvements
          EOF
          
          # Safely append the changes (which may contain special characters)
          echo "$CHANGES" >> temp_release.md
          
          # Continue with the rest of the content
          cat >> temp_release.md << EOF
          
          ### üîó Links
          - üåê **Live Demo:** [dhruvinrsoni.github.io/cipher-alchemist](https://dhruvinrsoni.github.io/cipher-alchemist/)
          - üì± **Repository:** [github.com/dhruvinrsoni/cipher-alchemist](https://github.com/dhruvinrsoni/cipher-alchemist)
          - üì• **Download:** [Download v${{ github.event.inputs.version }}](https://github.com/dhruvinrsoni/cipher-alchemist/archive/refs/tags/v${{ github.event.inputs.version }}.zip)
          
          ---
          
          ## üìö Previous Releases
          
          EOF
          
          # If RELEASES.md exists, extract previous releases and append
          if [ -f docs/RELEASES.md ]; then
            # Extract everything after "## üìö Previous Releases" or after first "---"
            awk '/^## üìö Previous Releases|^---/{found=1; next} found' docs/RELEASES.md >> temp_release.md
          fi
          
          # Replace the original file
          mv temp_release.md docs/RELEASES.md
          
          echo "‚úÖ Updated docs/RELEASES.md with v${{ github.event.inputs.version }} information"

      - name: üìä Generate Changelog
        id: changelog
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [ -n "$LATEST_TAG" ]; then
            CHANGES=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --no-merges)
          else
            CHANGES=$(git log --pretty=format:"- %s (%h)" --no-merges -10)
          fi
          
          # Handle empty changelog case
          if [ -z "$CHANGES" ]; then
            CHANGES="- Initial release"
          fi
          
          # Create changelog for release notes
          {
            echo "CHANGELOG<<EOF"
            echo "## üöÄ What's New"
            echo ""
            echo "$CHANGES"
            echo ""
            echo "## üîó Links"
            echo "- üåê [Live Demo](https://dhruvinrsoni.github.io/cipher-alchemist/)"
            echo "- üì± [Repository](https://github.com/${{ github.repository }})"
            echo "EOF"
          } >> $GITHUB_OUTPUT

      - name: üíæ Commit Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          git add version.txt docs/RELEASES.md
          # Only add manifest.json if it exists
          if [ -f manifest.json ]; then
            git add manifest.json
          fi
          
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "üîñ Release v${{ github.event.inputs.version }}

            - Updated version.txt with release information
            - Updated docs/RELEASES.md with new release notes
            - Updated manifest.json version (if applicable)"
            git push origin main
          fi

      - name: üè∑Ô∏è Create Tag
        id: create_tag
        run: |
          TAG_NAME="v${{ github.event.inputs.version }}"
          git tag -a "$TAG_NAME" -m "Release v${{ github.event.inputs.version }}"
          git push origin "$TAG_NAME"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT

      - name: üì¶ Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.create_tag.outputs.tag_name }}
          name: üîÆ Cipher Alchemist v${{ github.event.inputs.version }}
          body: ${{ steps.changelog.outputs.CHANGELOG }}
          draft: false
          prerelease: ${{ github.event.inputs.release_type == 'prerelease' }}
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: ‚úÖ Set Success Output
        id: set_success
        run: echo "success=true" >> $GITHUB_OUTPUT

  auto-deploy:
    runs-on: ubuntu-latest
    needs: create-release
    if: ${{ github.event.inputs.auto_deploy == 'true' && needs.create-release.outputs.release_success == 'true' }}
    
    steps:
      - name: üöÄ Trigger Deployment
        uses: actions/github-script@v7
        with:
          script: |
            try {
              await github.rest.actions.createWorkflowDispatch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                workflow_id: 'deploy-by-version.yml',
                ref: 'main',
                inputs: {
                  version_tag: '${{ needs.create-release.outputs.tag_name }}'
                }
              });
              console.log('‚úÖ Deployment workflow triggered successfully');
            } catch (error) {
              console.error('‚ùå Failed to trigger deployment:', error);
              core.setFailed('Failed to trigger auto-deployment');
            }

      - name: üéâ Release Summary
        run: |
          echo "üè∑Ô∏è Release created and deployment initiated!"
          echo "üìã Summary:"
          echo "   ‚Ä¢ Tag: ${{ needs.create-release.outputs.tag_name }}"
          echo "   ‚Ä¢ Auto-deployment: Triggered for production"
          echo "   ‚Ä¢ Time: $(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S IST')"
          echo ""
          echo "üìä Next Steps:"
          echo "   ‚Ä¢ Deployment workflow will run automatically"
          echo "   ‚Ä¢ Status workflow will verify deployment health"
          echo "   ‚Ä¢ Check Actions tab for progress updates"

