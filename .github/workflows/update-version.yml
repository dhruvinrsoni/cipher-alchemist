name: 🔄 Auto Version Update

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/**'
      - '**.md'
      - 'LICENSE'
      - 'version.txt'  # ✅ KEY: Don't trigger on version.txt changes
      - 'docs/CHANGELOG.md'  # ✅ KEY: Don't trigger on CHANGELOG.md changes
  workflow_dispatch:

jobs:
  update-version:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
      id-token: write
    
    steps:
      - name: 🛒 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      # ✅ NEW: Pre-sync check to prevent conflicts
      - name: 🔄 Pre-Sync Safety Check
        id: presync
        run: |
          echo "📥 Fetching latest remote state..."
          git fetch origin main
          
          # Check if remote has moved ahead since trigger
          BEHIND=$(git rev-list --count HEAD..origin/main)
          AHEAD=$(git rev-list --count origin/main..HEAD)
          
          echo "behind=$BEHIND" >> $GITHUB_OUTPUT
          echo "ahead=$AHEAD" >> $GITHUB_OUTPUT
          echo "📊 Sync Status: $AHEAD ahead, $BEHIND behind"
          
          # If we're behind, someone else pushed while workflow was running
          if [ $BEHIND -gt 0 ]; then
            echo "⚠️ Remote moved ahead during workflow execution"
            echo "conflict_risk=true" >> $GITHUB_OUTPUT
          else
            echo "conflict_risk=false" >> $GITHUB_OUTPUT
          fi

      - name: 🔍 Enhanced Skip Logic
        id: check_skip
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          COMMIT_AUTHOR=$(git log -1 --pretty=format:'%an')
          
          # Original skip conditions
          if [[ "$COMMIT_MSG" == *"[skip ci]"* ]] || [[ "$COMMIT_MSG" == *"[ci skip]"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=Skip CI flag in commit message" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          if [[ "$COMMIT_AUTHOR" == "github-actions[bot]" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=Commit from GitHub Actions bot" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # ✅ NEW: Skip if conflict risk detected
          if [[ "${{ steps.presync.outputs.conflict_risk }}" == "true" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=Conflict risk detected - remote ahead by ${{ steps.presync.outputs.behind }} commits" >> $GITHUB_OUTPUT
            echo "⚠️ Skipping to prevent merge conflicts"
            exit 0
          fi
            # Skip if only version.txt and/or CHANGELOG.md were changed
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          if [[ "$CHANGED_FILES" == "version.txt" ]] || [[ "$CHANGED_FILES" == "docs/CHANGELOG.md" ]] || [[ "$CHANGED_FILES" == "version.txt docs/CHANGELOG.md" ]] || [[ "$CHANGED_FILES" == "docs/CHANGELOG.md version.txt" ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "reason=Only version.txt and/or CHANGELOG.md changed" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "skip=false" >> $GITHUB_OUTPUT
          echo "✅ Safe to proceed with version update"

      - name: 📝 Update Development Version
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          COMMIT_HASH=$(git rev-parse --short HEAD)
          IST_TIME=$(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S IST')
          BRANCH_NAME=$(git branch --show-current)
          COMMIT_COUNT=$(git rev-list --count HEAD)
            echo "🔄 v${COMMIT_HASH} · $IST_TIME · 🚧 Dev Build #${COMMIT_COUNT} · ${BRANCH_NAME}" > version.txt

      - name: 📝 Generate CHANGELOG.md
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          echo "📋 Generating CHANGELOG.md..."
          
          # Create docs directory if it doesn't exist
          mkdir -p docs
          
          # Generate changelog header
          echo "# 📝 Changelog" > docs/CHANGELOG.md
          echo "" >> docs/CHANGELOG.md
          echo "_Last 50 meaningful changes (excluding version bumps). Auto-generated on each push to main._" >> docs/CHANGELOG.md
          echo "" >> docs/CHANGELOG.md
          echo "---" >> docs/CHANGELOG.md
          echo "" >> docs/CHANGELOG.md
          
          # Get the repository info for links
          REPO_URL="https://github.com/${{ github.repository }}"
          
          # Generate detailed changelog entries
          git log --no-merges -n 50 --grep="\[skip ci\]" --invert-grep --pretty=format:"%H" 2>/dev/null | while read -r hash; do
            if [ ! -z "$hash" ]; then
              # Get individual commit details to preserve multi-line bodies
              date=$(git show -s --format="%cd" --date=format:"%Y-%m-%d %H:%M:%S %z" "$hash" 2>/dev/null)
              author=$(git show -s --format="%an" "$hash" 2>/dev/null)
              subject=$(git show -s --format="%s" "$hash" 2>/dev/null)
              body=$(git show -s --format="%b" "$hash" 2>/dev/null)
              
              # Skip empty lines and ensure all required fields are present
              if [ ! -z "$hash" ] && [ ! -z "$date" ] && [ ! -z "$author" ] && [ ! -z "$subject" ]; then
                short_hash=$(echo "$hash" | cut -c1-7)
                
                echo "**Date:** $date  " >> docs/CHANGELOG.md
                echo "**Commit:** [$short_hash]($REPO_URL/commit/$hash)  " >> docs/CHANGELOG.md
                echo "**Author:** $author" >> docs/CHANGELOG.md
                echo "" >> docs/CHANGELOG.md
                echo "#### $subject" >> docs/CHANGELOG.md
                echo "" >> docs/CHANGELOG.md
                
                # Add full body if it exists and is not empty
                if [ ! -z "$body" ] && [ "$body" != " " ] && [ "$body" != "" ]; then
                  echo "$body" >> docs/CHANGELOG.md
                  echo "" >> docs/CHANGELOG.md
                fi
                
                echo "---" >> docs/CHANGELOG.md
                echo "" >> docs/CHANGELOG.md
              fi
            fi          done
          
          echo "✅ CHANGELOG.md generated successfully"

      # ✅ NEW: Conflict-safe commit with retry logic
      - name: 💾 Smart Commit with Conflict Prevention
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Check if there are any changes to commit
          if git diff --quiet version.txt docs/CHANGELOG.md; then
            echo "📝 No changes to commit"
            exit 0
          fi
            git add version.txt docs/CHANGELOG.md
          git commit -m "🔄 Auto-update version and changelog [skip ci]
          
          Build: #$(git rev-list --count HEAD)
          Trigger: ${{ github.event_name }}
          Updated: version.txt, docs/CHANGELOG.md"
          
          # ✅ SOLUTION: Retry push with auto-sync
          echo "📤 Attempting to push with conflict prevention..."
          for attempt in {1..3}; do
            echo "🔄 Push attempt $attempt/3"
            
            if git push origin main; then
              echo "✅ Successfully pushed on attempt $attempt"
              break
            else
              echo "⚠️ Push failed on attempt $attempt"
              
              if [ $attempt -lt 3 ]; then
                echo "📥 Syncing with remote and retrying..."
                git fetch origin main
                
                # Try rebase first, fallback to merge
                if git rebase origin/main; then
                  echo "✅ Rebased successfully"
                else
                  echo "⚠️ Rebase failed, trying merge..."
                  git rebase --abort
                  git merge origin/main || {
                    echo "❌ Cannot resolve conflicts automatically"
                    echo "This will be handled in the next workflow run"
                    exit 0
                  }
                fi
                
                sleep $((attempt * 2))  # Exponential backoff
              else
                echo "❌ Failed to push after 3 attempts"
                echo "⏭️ Will be retried in next workflow run"
                exit 0  # Don't fail the workflow
              fi
            fi
          done

      - name: 🏗️ Setup Pages
        if: steps.check_skip.outputs.skip == 'false'
        uses: actions/configure-pages@v4

      - name: 📤 Upload to Pages
        if: steps.check_skip.outputs.skip == 'false'
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: 🌐 Deploy to GitHub Pages
        if: steps.check_skip.outputs.skip == 'false'
        id: deployment
        uses: actions/deploy-pages@v4

      - name: ✅ Enhanced Summary
        run: |
          if [ "${{ steps.check_skip.outputs.skip }}" = "true" ]; then
            echo "⏭️ Version update skipped"
            echo "📋 Reason: ${{ steps.check_skip.outputs.reason }}"
            
            # ✅ NEW: Provide guidance for manual resolution
            if [[ "${{ steps.check_skip.outputs.reason }}" == *"Conflict risk"* ]]; then
              echo ""
              echo "🔧 For developers:"
              echo "   • Run 'git pull origin main' before your next commit"
              echo "   • This ensures your local branch is synchronized"
              echo "   • Prevents merge conflicts on future pushes"            fi
          else
            echo "✅ Version update completed successfully"
            echo "📋 Details:"
            echo "   • New Version: $(cat version.txt)"
            echo "   • CHANGELOG: docs/CHANGELOG.md updated with latest 50 commits"
            echo "   • Deployed: ${{ steps.deployment.outputs.page_url || 'N/A' }}"
            echo "   • Time: $(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S IST')"
            echo ""
            echo "💡 Next developer push will be conflict-free!"
          fi
