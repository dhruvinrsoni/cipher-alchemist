name: üöÄ Deploy by Version

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to deploy (e.g., v1.0.0)'
        required: true
        type: string
      force_deploy:
        description: 'Force deployment (bypass checks)'
        required: false
        default: false
        type: boolean

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    permissions:
      contents: read
      pages: write
      id-token: write
    
    steps:
      - name: üõí Checkout Tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version_tag }}
          fetch-depth: 0

      - name: üîç Validate Tag
        run: |
          # ‚úÖ FIXED: Enhanced validation with force deploy bypass
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "‚ö†Ô∏è Force deploy enabled - bypassing tag validation"
          else
            if ! git tag -l | grep -q "^${{ github.event.inputs.version_tag }}$"; then
              echo "‚ùå Tag ${{ github.event.inputs.version_tag }} does not exist"
              echo "Available tags:"
              git tag -l | sort -V | tail -10
              exit 1
            fi
          fi
          echo "‚úÖ Tag ${{ github.event.inputs.version_tag }} validated"

      # ‚úÖ NEW: Pre-deployment health check
      - name: üè• Pre-deployment Health Check
        if: ${{ github.event.inputs.force_deploy == 'false' }}
        run: |
          echo "üîç Running pre-deployment checks..."
          
          # Check if essential files exist
          REQUIRED_FILES=("index.html" "version.txt")
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Required file missing: $file"
              exit 1
            else
              echo "‚úÖ Found: $file"
            fi
          done
          
          echo "‚úÖ Pre-deployment health check passed"

      - name: üèóÔ∏è Setup Pages
        uses: actions/configure-pages@v4

      - name: üì§ Upload to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: '.'

      - name: üåê Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4      # ‚úÖ NEW: Post-deployment verification
      - name: üîç Post-deployment Verification
        run: |
          echo "‚è≥ Waiting for deployment to propagate..."
          sleep 30
          
          DEMO_URL="${{ steps.deployment.outputs.page_url }}"
          MAX_RETRIES=5
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if curl -f -s "$DEMO_URL" > /dev/null; then
              echo "‚úÖ Deployment verification successful"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚è≥ Retry $RETRY_COUNT/$MAX_RETRIES - waiting 10 seconds..."
              sleep 10
            fi
          done
          
          if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
            echo "‚ö†Ô∏è Deployment verification failed after $MAX_RETRIES attempts"
            echo "üîó Manual verification required: $DEMO_URL"
          fi

      - name: ‚úÖ Deployment Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo "üìã Details:"
          echo "   ‚Ä¢ Version: ${{ github.event.inputs.version_tag }}"
          echo "   ‚Ä¢ Environment: github-pages"
          echo "   ‚Ä¢ URL: ${{ steps.deployment.outputs.page_url }}"
          echo "   ‚Ä¢ Force Deploy: ${{ github.event.inputs.force_deploy }}"
          echo "   ‚Ä¢ Time: $(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S IST')"
          echo ""
          echo "üìä Next Steps:"
          echo "   ‚Ä¢ Deployment status workflow will auto-run to verify health"
          echo "   ‚Ä¢ Check the Actions tab for status updates"
