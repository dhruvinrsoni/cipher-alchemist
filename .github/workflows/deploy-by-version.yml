name: üöÄ Deploy Release by Version

on:
  workflow_dispatch:
    inputs:
      version_tag:
        description: 'Version tag to deploy (e.g., v1.0.0)'
        required: true
        type: string
      deployment_environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - preview
      force_deploy:
        description: 'üî• Force deploy even if validation fails'
        required: true
        default: false
        type: boolean

jobs:
  validate-version:
    runs-on: ubuntu-latest
    outputs:
      tag_exists: ${{ steps.check_tag.outputs.exists }}
      version_clean: ${{ steps.version_info.outputs.clean_version }}
    steps:
      - name: üõí Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üîç Validate Version Tag Exists
        id: check_tag
        run: |
          git fetch --tags
          if git tag -l | grep -q "^${{ github.event.inputs.version_tag }}$"; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Version tag ${{ github.event.inputs.version_tag }} exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ùå Version tag ${{ github.event.inputs.version_tag }} does not exist!"
            echo ""
            echo "Available tags:"
            git tag -l | grep "^v" | sort -V | tail -10
            if [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              exit 1
            else
              echo "‚ö†Ô∏è Force deploy enabled - continuing despite missing tag"
            fi
          fi

      - name: üìã Get Version Info
        id: version_info
        run: |
          # Extract clean version (remove 'v' prefix if present)
          CLEAN_VERSION="${{ github.event.inputs.version_tag }}"
          if [[ "$CLEAN_VERSION" == v* ]]; then
            CLEAN_VERSION="${CLEAN_VERSION:1}"
          fi
          echo "clean_version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "Clean version: $CLEAN_VERSION"

  deploy-release:
    runs-on: ubuntu-latest
    needs: validate-version
    if: ${{ needs.validate-version.outputs.tag_exists == 'true' || github.event.inputs.force_deploy == 'true' }}
    permissions:
      contents: read
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: üõí Checkout Release Tag
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.version_tag }}
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã Display Deployment Info
        run: |
          echo "üöÄ Deploying Cipher Alchemist"
          echo ""
          echo "üìã Deployment Details:"
          echo "   ‚Ä¢ Version: ${{ github.event.inputs.version_tag }}"
          echo "   ‚Ä¢ Clean Version: ${{ needs.validate-version.outputs.version_clean }}"
          echo "   ‚Ä¢ Environment: ${{ github.event.inputs.deployment_environment }}"
          echo "   ‚Ä¢ Commit: $(git rev-parse --short HEAD)"
          echo "   ‚Ä¢ Time: $(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S IST')"
          echo ""
          
          # Show version.txt content if exists
          if [ -f version.txt ]; then
            echo "üìÑ Version file content:"
            cat version.txt
          fi

      - name: üîß Setup Pages
        uses: actions/configure-pages@v4

      - name: üì¶ Build Release Package
        run: |
          echo "üì¶ Preparing deployment package..."
          
          # Create deployment directory
          mkdir -p _site
          
          # Copy all necessary files (exclude dev/build artifacts)
          cp index.html _site/ 2>/dev/null || echo "‚ö†Ô∏è index.html not found"
          cp styles.css _site/ 2>/dev/null || echo "‚ö†Ô∏è styles.css not found"
          cp scripts.js _site/ 2>/dev/null || echo "‚ö†Ô∏è scripts.js not found"
          cp manifest.json _site/ 2>/dev/null || echo "‚ö†Ô∏è manifest.json not found"
          cp service-worker.js _site/ 2>/dev/null || echo "‚ö†Ô∏è service-worker.js not found"
          cp version.txt _site/ 2>/dev/null || echo "‚ö†Ô∏è version.txt not found"
          cp *.png _site/ 2>/dev/null || echo "‚ö†Ô∏è No PNG files found"
          cp *.ico _site/ 2>/dev/null || echo "‚ö†Ô∏è No ICO files found"
          cp LICENSE _site/ 2>/dev/null || echo "‚ö†Ô∏è LICENSE not found"
          
          # List deployed files
          echo ""
          echo "üìÅ Files included in deployment:"
          ls -la _site/

      - name: üîç Validate Deployment Package
        run: |
          echo "üîç Validating deployment package..."
          
          # Check required files
          MISSING_FILES=""
          
          [ ! -f "_site/index.html" ] && MISSING_FILES="$MISSING_FILES index.html"
          [ ! -f "_site/styles.css" ] && MISSING_FILES="$MISSING_FILES styles.css"
          [ ! -f "_site/scripts.js" ] && MISSING_FILES="$MISSING_FILES scripts.js"
          [ ! -f "_site/manifest.json" ] && MISSING_FILES="$MISSING_FILES manifest.json"
          
          if [ -n "$MISSING_FILES" ]; then
            echo "‚ùå Missing critical files: $MISSING_FILES"
            if [ "${{ github.event.inputs.force_deploy }}" != "true" ]; then
              echo "üí° Use 'Force deploy' option to deploy anyway."
              exit 1
            else
              echo "‚ö†Ô∏è Force deploy enabled - continuing with missing files"
            fi
          else
            echo "‚úÖ All critical files present"
          fi
          
          # Check file sizes
          if [ -f "_site/index.html" ]; then
            SIZE=$(wc -c < "_site/index.html")
            echo "üìä index.html size: $SIZE bytes"
            if [ $SIZE -lt 100 ]; then
              echo "‚ö†Ô∏è index.html seems very small - possible issue"
            fi
          fi

      - name: üì§ Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '_site'

      - name: üåê Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: üîó Update Release with Deployment Info
        if: ${{ needs.validate-version.outputs.tag_exists == 'true' }}
        run: |
          echo "üîó Adding deployment info to release..."
          
          # Get release info
          RELEASE_URL="https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version_tag }}"
          PAGES_URL="${{ steps.deployment.outputs.page_url }}"
          
          echo "üìã Deployment completed:"
          echo "   ‚Ä¢ Release: $RELEASE_URL"
          echo "   ‚Ä¢ Live Site: $PAGES_URL"
          echo "   ‚Ä¢ Environment: ${{ github.event.inputs.deployment_environment }}"

      - name: üéâ Deployment Summary
        run: |
          echo "üéâ Deployment completed successfully!"
          echo ""
          echo "üìã Deployment Summary:"
          echo "   ‚Ä¢ Version: ${{ github.event.inputs.version_tag }}"
          echo "   ‚Ä¢ Environment: ${{ github.event.inputs.deployment_environment }}"
          echo "   ‚Ä¢ Time: $(TZ='Asia/Kolkata' date '+%Y-%m-%d %H:%M:%S IST')"
          echo ""
          echo "üîó Links:"
          echo "   ‚Ä¢ üåê Live Site: ${{ steps.deployment.outputs.page_url }}"
          echo "   ‚Ä¢ üì¶ Release: https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.version_tag }}"
          echo "   ‚Ä¢ üì± Repository: https://github.com/${{ github.repository }}"
          echo ""
          echo "‚úÖ Cipher Alchemist ${{ github.event.inputs.version_tag }} is now live!"
